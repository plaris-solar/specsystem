import ldap
import os
from django_auth_ldap.config import LDAPSearch, LDAPSearchUnion, GroupOfNamesType, LDAPGroupQuery
from pathlib import Path

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*_GenerateAcustomKey'

DATABASES = {
    "default": {
        "ENGINE": "mssql",
        "NAME": 'spec_qa',
        "HOST": 'sqlexpress',
        "USER": "sa",
        "PASSWORD": "Passw@rd",
        "OPTIONS": {
            "driver": "ODBC Driver 18 for SQL Server",
            "TRUST_SERVER_CERTIFICATE": True,
            'extra_params': "Encrypt=no"  # TrustServerCertificate=no
        },
    },
}


os.environ['ADMIN_USER'] = 'spec-sup-test01'
os.environ['ADMIN_PASSWD'] = 'SupPasswd'

os.environ['USER_USER'] = 'spec-user-test01'
os.environ['USER_PASSWD'] = 'UserPasswd'

os.environ['AD_SUFFIX'] = 'Test'


# Settings for LDAP.
AUTHENTICATION_BACKENDS = [
    'proj.util.MyLDAPBackend',
    "django.contrib.auth.backends.ModelBackend",
]
AUTH_LDAP_SERVER_URI = 'ldap://ldap:389'
AUTH_LDAP_BIND_DN = 'cn=admin,dc=company,dc=local'
AUTH_LDAP_BIND_PASSWORD = 'adminpassword'
AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
    LDAPSearch("ou=users,cn=SPEC-Admin-Test,dc=company,dc=local", ldap.SCOPE_SUBTREE, "(uid=%(user)s)"),
    LDAPSearch("ou=equipvend,dc=company,dc=local", ldap.SCOPE_SUBTREE, "(uid=%(user)s)"),
)
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    "ou=application groups,ou=groups,dc=company,dc=local", ldap.SCOPE_SUBTREE, "(objectClass=groupOfNames)"
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")
# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "uid",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": (
        LDAPGroupQuery("ou=users,cn=SPEC-Admin-Test,dc=company,dc=local") |
        LDAPGroupQuery("cn=spec-readall,ou=application groups,ou=groups,dc=company,dc=local")
    ),
    "is_superuser": "ou=users,cn=SPEC-Admin-Test,dc=company,dc=local"
}
# Cache distinguished names and group memberships for an hour to minimize
# LDAP traffic.
AUTH_LDAP_CACHE_TIMEOUT = 3600

LOG_DIR = '/var/log'
LOGGING_OVERRIDES = {
                "handlers": {
                    'djangoInfo': {
                        'filename': os.path.join(LOG_DIR, "django.log"),
                    },
                    'appInfo': {
                        'filename': os.path.join(LOG_DIR, "spec.log"),
                    },
                    'authInfo': {
                        'filename': os.path.join(LOG_DIR, "auth.log"),
                    },
                },
                "loggers": {
                    'django': {
                        'handlers': ['console', ],
                        'level': 'INFO',
                    },
                    'requests': {
                        'handlers': ['console', ],
                        'level': 'INFO',
                    },
                    'data': {
                        'handlers': ['console', ],
                        'level': 'INFO',
                    },
                    "django_auth_ldap": {
                        "handlers": ['console', ],
                        "level": "DEBUG",
                    },
                },
            }


BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# PDF Conversion tools
# Install LibreOffice from https://www.libreoffice.org/download/download-libreoffice/
SOFFICE = "c:/Program Files/LibreOffice/program/soffice.exe"
TEMP_PDF = os.path.join(MEDIA_ROOT, 'temp')

#EMAIL_HOST = 'smtp.office365.com'
#EMAIL_PORT = 587
#EMAIL_HOST_USER = 'spec_system@company.com'
#EMAIL_HOST_PASSWORD = 'SuperSecret'
#EMAIL_USE_TLS    = True